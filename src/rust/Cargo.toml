#
# Copyright 2019-2021 Signal Messenger, LLC
# SPDX-License-Identifier: AGPL-3.0-only
#

[package]
name = "ringrtc"
version.workspace = true
authors.workspace = true
edition = "2021"
description = "A Rust interface for WebRTC"
license = "AGPL-3.0-only"

[lib]
crate-type = ["cdylib", "staticlib", "lib"]

[[bin]]
name = "direct"
required-features = ["direct"]

[[bin]]
name = "group_call"
required-features = ["native", "sim_http"]

[[bin]]
name = "call_link"
# This binary doesn't depend on WebRTC at all, so either `sim` or `native` would work.
required-features = ["uuid", "sim", "sim_http", "rand_chacha"]

[[bin]]
name = "call_sim-cli"
required-features = ["call_sim", "injectable_network"]

[dependencies]
regex-aot = { workspace = true }

aes               = { workspace = true }
aes-gcm-siv       = { workspace = true, features = ["aes"] }
anyhow            = { workspace = true }
base64            = { workspace = true }
bytes             = { workspace = true }
ctr               = { workspace = true }
hmac              = { workspace = true }
lazy_static       = { workspace = true }
libc              = { workspace = true }
log               = { workspace = true, features = ["std", "max_level_trace", "release_max_level_info"] }
num_enum          = { workspace = true }
prost             = { workspace = true }
rand              = { workspace = true, features = [] }
regex-automata    = { workspace = true, features = ["dfa", "perf", "std"] }
hkdf              = { workspace = true }
serde_json        = { workspace = true }
serde             = { workspace = true, features = ["derive"] }
serde_with        = { workspace = true, features = ["base64", "hex"] }
hex               = { workspace = true, features = ["serde"] }
sha2              = { workspace = true }
static_assertions = { workspace = true }
subtle            = { workspace = true }
thiserror         = { workspace = true }
x25519-dalek      = { workspace = true, features = ["static_secrets"] }

# Used by call links. Be careful not to pull in more than strictly needed, for both code size and
# maintenance reasons. In particular, anything involving credentials should be left to
# libsignal-client.
bincode = { workspace = true }
uuid = { workspace = true, optional = true }
zkgroup = { workspace = true }

# Optional, needed by the "electron" feature
neon = { workspace = true, features = ["napi-6"], optional = true }

# Optional, needed to check Android-specific code when not targeting Android
jni = { workspace = true, optional = true }

# Optional, needed by the "http" feature
ureq = { workspace = true, optional = true }
rustls = { workspace = true, features = ["ring"], optional = true }

# Optional, needed for call-link-test-client
rand_chacha = { workspace = true, optional = true }

# Optional, needed by the "call_sim" feature
bitvec = { workspace = true, optional = true }
clap = { workspace = true, features = ["derive"], optional = true }
fern = { workspace = true, optional = true }
tokio = { workspace = true, features = ["rt-multi-thread"], optional = true }
tonic = { workspace = true, optional = true }
tower = { workspace = true, features = ["timeout"], optional = true }

# Optional, needed by the "direct" and "call_sim" feature
chrono = { workspace = true, optional = true }

call_protobuf = { workspace = true }
mrp = { workspace = true }

# Optional, needed by "native" feature
cubeb = { workspace = true, optional = true }
cubeb-core = { workspace = true, optional = true }
regex = { workspace = true, optional = true }

[target.'cfg(windows)'.dependencies]
# Only needed by native feature on windows
windows = { version = "0.58.0", optional = true, features = ["Win32_System_Com"] }

[target.'cfg(not(target_os="android"))'.dependencies]
# sysinfo depends on getgrgid_r, which was added in Android API level 24
sysinfo = { version = "0.31.2", default-features = false, features = ["system"] }

[features]
default = []
sim = []
electron = ["neon", "native"]
native = ["cubeb", "cubeb-core", "windows", "regex"]
prebuilt_webrtc = ["native"]
prebuilt_webrtc_sim = ["native", "simnet"]
simnet = ["injectable_network"]
injectable_network = []
sim_http = ["ureq", "rustls"]
check-all = ["electron", "jni"]
call_sim = ["call_protobuf/call_sim", "native", "injectable_network", "bitvec", "chrono", "clap", "fern", "tokio", "tonic", "tower", "sim_http"]
direct = ["native", "simnet", "chrono", "clap"]

[[test]]
name = "incoming"
path = "tests/incoming.rs"
required-features = ["sim"]

[[test]]
name = "outgoing"
path = "tests/outgoing.rs"
required-features = ["sim"]

[target.'cfg(target_os="android")'.dependencies]
jni = { version = "0.21.1", default-features = false }

[dev-dependencies]
uuid = { workspace = true }
env_logger = { workspace = true }
rand_chacha = { workspace = true }
